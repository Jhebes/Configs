#!/usr/bin/env python

import argparse
import sys


def read_file(fpath):
    """
    Read file, collect and return all file lines.
    Params:
        fpath -- text file path
    Returns:
        lines_cache -- a list of lines collected from file
    """
    with open(fpath, 'r') as opened:
        lines_cache = []
        for line in opened:
            lines_cache.append(line)
        return lines_cache


def refit(width, line):
    """
    Depending on whether a line ends with a whitespace or a char split
    accordingly into two parts. First part should always be < width, second
    part is untouched. Return both.
    Params:
        width -- line width to fit to
        line -- a line that needs to be trimmed
    Returns:
        first -- first part of a line, < width
        ext_line -- second part of a line left after the split
    """
    first = line[:width]
    if first.endswith(' '):
        ext_line = line[width:]
    else:
        first = line[:width].rsplit(' ', 1)
        first.append('')  # because line[:width] can be without ws
        ext_line = ''.join([first[1], line[width:]])
        first = first[0]
    return first, ext_line


def fit_lines(width, lines):
    """
    Refit each line to predefined width.
    Params:
        width -- line width to fit to
        lines -- a list of unprocessed file lines
    """
    new_lines = []
    next_line = ''
    new_line = ''
    # refit file lines first
    for line in lines:
        line = ' '.join([next_line, line]).strip()
        if len(line) > width:
            new_line, next_line = refit(width, line)
            new_lines.append(new_line)
        else:
            # if previous line had spaces, don't remove it from next line
            had_spaces = len(new_line.split()) > 1 or False
            next_line = ''  # flush
            if not line: continue  # skipping empty lines
            new_lines.append(line)
    # handle left over lines accumulated after refitting
    while len(next_line) > width:
        new_line, next_line = refit(width, next_line)
        new_lines.append(new_line)
    # add the rest
    new_lines.append(next_line)
    return new_lines


def save_file(out_file, data):
    """
    Save refitted lines to a new file.
    Params:
        out_file -- file name to save
    """
    with open(out_file, 'w') as wfile:
        wfile.write('\n'.join(data))


def justify(width, lines):
    """
    Insert whitespaces in order to stretch a line along predefined width.
    Params:
        width -- specified line width
        lines -- a list of refitted lines
    Returns:
        jlines -- a list of justified lines
    """
    jlines = []
    for line in lines:
        if not line: continue
        # if line < 75% of width, do not justify
        if len(line) / width <= 0.75:
            jlines.append(line)
            continue
        line_lst = line.split()
        diff = width - len(line)  # refitted and width space difference
        for i, word in enumerate(line_lst):
            if i == 0: jline = word; continue
            diff -= 1  # decrement difference each time we add a whitespace
            ws = ' '
            if diff > 0: ws += ' '  # add one more whitespace until diff is 0
            jline = ws.join([jline, word])
        jlines.append(jline)  # add a justified line
    return jlines


def line_up(args):
    """
    Process user specified args and adjust the text and save / show the result.
    Params:
        args -- command-line supplied arguments
    """
    # check if width is not < 2
    if int(args.width) <= 1:
        print('Error: "args.width" is too small')
        sys.exit()
    # if user didn't provide output filename, use source file
    if not args.out:
        args.out = args.filename
    new_lines = fit_lines(int(args.width) - 1, read_file(args.filename))
    if args.justify:
        new_lines = justify(int(args.width), new_lines)
    if args.test:
        for line in new_lines:
            print(line)
    else:
        save_file(args.out, new_lines)


if __name__ == "__main__":
    prs = argparse.ArgumentParser(description="""
    This script refits all lines in a file to some arbitrary line width.""")
    prs.add_argument('-w', '--width', default=79,
                     help='Specify your line width, default width is 79 \
                     characters.',
                     required=False)
    prs.add_argument('-o', '--out',
                     help='Specify your output file name. If not specified the\
                     original file will be overwritten.',
                     required=False)
    prs.add_argument('-j', '--justify', action='store_true',
                     help='Justify *lines to specified width. \
                          *Only those lines which are >= 75%% of width are \
                          justified.',
                     required=False)
    prs.add_argument('-t', '--test', action='store_true',
                     help='Just print the results of processing. \
                     No files will be written.',
                     required=False)
    prs.add_argument('filename', nargs='?')
    arguments = prs.parse_args()
    line_up(arguments)
